plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.santander.springcepapi'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(myJavaVersion)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform("software.amazon.awssdk:bom:${awsSdkVersion}")

    // Spring Framework
    implementation(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework:spring-webflux'
    )

    // AWS Dependencies
    implementation(
            'software.amazon.awssdk:dynamodb',
            'software.amazon.awssdk:dynamodb-enhanced'
    )

    // Web Services & Documentation
    implementation(
            "jakarta.ws.rs:jakarta.ws.rs-api:${jakartaWsVersion}",
            "org.glassfish.jersey.core:jersey-common:${jerseyVersion}",
            "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}",
            "io.projectreactor.netty:reactor-netty:${reactorNettyVersion}"
    )

    // Testing
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation(
            'software.amazon.awssdk:apache-client',
            "org.mockito:mockito-core:${mockitoVersion}",
            "io.projectreactor:reactor-test:${reactorTestVersion}"
    )

    // Lint
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-Xlint:unchecked")
    options.encoding = 'UTF-8'
    options.release = myJavaVersion as Integer
}

checkstyle {
    toolVersion = checkstyleVersion
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

test {
    systemProperty 'spring.profiles.active', 'test'
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    maxHeapSize = '1G'
    jvmArgs = [
            "-Xshare:off",
            "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('byte-buddy-agent') }}"
    ]

    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

bootJar {
    archiveFileName = finalJarName
}