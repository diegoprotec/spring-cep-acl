plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.santander.springcepapi'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform("software.amazon.awssdk:bom:${awsSdkVersion}")

    // Spring Framework
    implementation(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework:spring-webflux'
    )

    // AWS Dependencies
    implementation(
            'software.amazon.awssdk:dynamodb',
            'software.amazon.awssdk:dynamodb-enhanced'
    )

    // Web Services & Documentation
    implementation(
            "jakarta.ws.rs:jakarta.ws.rs-api:${jakartaWsVersion}",
            "org.glassfish.jersey.core:jersey-common:${jerseyVersion}",
            "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}",
            "io.projectreactor.netty:reactor-netty:${reactorNettyVersion}"
    )

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // Testing
    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'software.amazon.awssdk:apache-client',
            "org.mockito:mockito-inline:${mockitoVersion}"
    )

    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-Xlint:unchecked")
    options.encoding = 'UTF-8'
    options.release = 22
}

checkstyle {
    toolVersion = checkstyleVersion
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

test {
    systemProperty 'spring.profiles.active', 'test'
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    maxHeapSize = '1G'
    jvmArgs = [
            "-Xshare:off",
            "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('byte-buddy-agent') }}"
    ]

}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
        rule {
            element = 'METHOD'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

tasks.register('checkCoverage') {
    description = 'Executa o test e verificação de cobertura do código'
    group = 'verification'

    dependsOn test
    dependsOn jacocoTestReport
    dependsOn jacocoTestCoverageVerification
}

bootJar {
    archiveFileName = finalJarName
}